Back-end

-How to connect front-end to back-end by implimaning cors policy at asp.net core server side in startup file.
-learned CQRS (Command query responsbilty segregation) single database, read-write database, event store
-dependancies should always point inwords of circle(uncle bob clean code) API->Application->Domain
-MediatR pattern and library takes object-in->handler->object out. 
    https://dotnetcoretutorials.com/2019/04/30/the-mediator-pattern-in-net-core-part-1-whats-a-mediator/

-Cancellation token is when user abort the task it inform the server to stop working on that request.

-In ApiController     //if we are not using ApiController attribute on top then we need to use the
                    // [FromBody]Create.Command in method arguments to give hint to controler where to look.

-Async function return promise by default.

-For class in javascript if we use for type check it will transpile in javascript in runtime.
 but interface wont transpile in js so little performance benifit.

-Asp.Net Core Identity //https://jwt.io/introduction/
    -PasswordHasher class in Identity uses Hasher PBKDF and 128 bit salt.

-JWT tokens (JSON web Tokens)
    JWT tokens server doesn't store any information regarding user. browser stores the token and server just checks token with it secret key
    to verify the token. SO in this way you can run Same JWT tokens on mutltiple server comapare with same secret key to session Id where is doesent run on different server.

Front-end
-Mobx vs redux _In mob x you can mutate state _In Redux you can not.

-Mobx structure -we define variable in observable and by attaching component to observer
                component get re-render if variable changes.

                -action is used to change varibles in observable.

                -computed property used to do some logic work of stateand which ever component using themselves
                they will be auto re-render when action changes to observable and comuted function automatic detec those changes.
                It wil start render the component who ever using them.

                -Reaction, they observe the observable from stor itself and whenever the observable changes,
                They will do the reaction regarding that. so it ttake two function.
                (1st function will observe the property which assigned to it, and secont fucntion operated if that observable changes. 

                -React creatContext is allowing any component to access the stored value or mobx store here any where in app.
                so we store mobx in to create context and the with usecontext hook we can access them any where in whole application.

                -Observer is higher order function to make any component observer of observable by wraping that component in observer(copmonent)


-Error Handling 
    -API side
        -Using data annotation Attributes
        -Fluent Validation
        -exceptions and error handling 
    custome middleware for error handling.
            1) [ApiController] allows error handled in it context. withut it we have to do ModelState.isValid method.
               It also allows us to not use [FromBody] attribute in controller method.


    -clinet side
        -Axios interceptors
        -trowing error from Axios.




--Libraries used in this project
    -Mobx library
    -React Router
    -Simantic UI React(UI library)
    -React tostify(notification library)
    -React final form(form package)  
    -React widgets(Date&Time picker)
    -date-fns(morder javascript library for date functions)
    -Revalidate(To revalidate data on client side by using library's functions)
    

-Challanges
1)cors
2)integrating mobx 
3) create activity and edit activity using same form with router. used key to observe change props of key and
    to replicate effect of componentWillUnmount by using use effect hooks.
    -used fully uncontrolled key to observe change and created new instace of the component
    -and checked performance imapact as well.

4)Used activity registry MAp() to check if the activity is loaded already if yes then for see detail not making another server request
 request and using activity Registry to load that event.


-Naming Convention
    -NAming Convention //https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines
    -Persitstence (Data Access Layer) https://mapr.com/blog/is-dataware-the-new-persistence-layer-for-application-stacks/#:~:text=It's%20called%20persistent%20for%20a,occur%20at%20the%20persistence%20layer.
    -Infrastructure //Other services Implemetations https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures

-Perfomance Improvement
    *Froontend side perfomance improvement
    -Made less server calls by implimating client side Validation
    -Made less server request calls 
    -Used activity registry MAp() to check if the activity is loaded already if yes then for see detail not making another server request
    request and using activity Registry to load that event.

    *Sever side perfomance improvement
    -Used Jwt Tokens to authorize user faster. no need to query our database.

Scalabilty:
    -By using Jwt tokens we can scale application to multiple servers by having same secret key on both the server.
        No need to depend on session based same server to authenticate user.

    -Made application with loosly coupled and good for testing by using dependancy injection.