-How to connect front-end to back-end by implimaning cors policy at asp.net core server side in startup file.
-learned CQRS (Command query responsbilty segregation) single database, read-write database, event store
-dependancies should always point inwords of circle(uncle bob clean code) API->Application->Domain
-MediatR pattern and library takes object-in->handler->object out. 
    https://dotnetcoretutorials.com/2019/04/30/the-mediator-pattern-in-net-core-part-1-whats-a-mediator/

-Cancellation token is when user abort the task it inform the server to stop working on that request.

-In ApiController     //if we are not using ApiController attribute on top then we need to use the
                    // [FromBody]Create.Command in method arguments to give hint to controler where to look.

-For class in javascript if we use for type check it will transpile in javascript in runtime.
 but interface wont transpile in js so little performance benifit.

-Mobx vs redux _In mob x you can mutate state _In Redux you can not.

-Mobx structure -we define variable in observable and by attaching component to observer
                component get re-render if variable changes.

                -action is used to change varibles in observable.

                -computed property used to do sume logic work of stateand which ever component using themselves
                they will be auto re-render when action changes to observable and comuted function automatic detec those changes.
                It wil start render the component who ever using them.

                -Reaction, they observe the observable from stor itself and whenever the observable changes,
                They will do the reaction regarding that. so it ttake two function.
                (1st function will observe the property which assigned to it, and secont fucntion operated if that observable changes. 

                -React creatContext is allowing any component to access the stored value or mobx store here any where in app.
                so we store mobx in to create context and the with usecontext hook we can access them any where in whole application.

                -Observer is higher order function to make any component observer of observable by wraping that component in observer(copmonent)

-Challanges
1)cors
2)integrating mobx 
3) create activity and edit activity using same form with router. used key to observe change props of key and
    to replicate effect of componentWillUnmount by using use effect hooks.
    -used fully uncontrolled key to observe change and created new instace of the component
    -and checked performance imapact as well.